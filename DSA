REVERSE DIGITS-

class Solution {
  public:
    int reverseDigits(int n) {
        int k=n;
        int ans=0;
        while(k>0){
            ans=ans*10+k%10;
            k/=10;
        }
        return ans;
    }
};

SEARCH INSERT POSITION-

class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        int start=0;
         int end=nums.size()-1;
         int mini=-1;
         int lb=lower_bound(nums.begin(),nums.end(),target)-nums.begin();
         while(start<=end){
             int mid=(start+end)/2;
             if(target>=nums[mid]){
                 start=mid+1;
                 mini=mid;
             }
             else{
                 end=mid-1;
             }
         }
         if( mini<=nums.size() && nums[mini]==target) return mini;
         return mini+1;
    }
};

SINGLE NUMBER-

class Solution {
public:
    int singleNumber(vector<int>& nums) {
       int xor1=0;
        for(auto i:nums)
         {
            xor1^=i;
         }
         
         return xor1;
        
    }
};

MISSING NUMBER-

class Solution {
public:
    int missingNumber(vector<int>& nums) {
        int l=nums.size();
       int xor1=0;
       int xor2=0;
       for(int i=0;i<l;i++)
        {
            xor1=xor1^nums[i];
            xor2=xor2^(i+1);
        }
        return xor1^xor2;
    }
};

